# Task Manager

## Purpose
This is my attempt to demonstrate to Voice Foundary that they should hire me for their Node.js 
developer position.  The project accurately depicts my skill set.  I think it should be good enough.

## The Problem
I was given a great deal of latitude, with hints - but limited specific direction.

The stated task is:

_Using NodeJS and other supporting tools, write a command line app or web API to manage tasks. 
Specifically, focus on task recurrence; the other features can be VERY minimalist 
(or even missing!!). The goal is to show how you would design something that can be very complex. 
We want to see creativity, use of tools such as Typescript and unit-testing frameworks, 
well-structured code, and attention to maintainability. This is your chance to show-off._

My summation of this is "A node.js based task management system that demonstrates the ability
to design and code complex systems."

I choose the web api approach because that is what I am most confident in.

## The Tools
The tool set that I have chosen is:
* Node.js
* Express
* MongoDB
* Mongoose
* Mocha
* Chai

## The Design
There are hundreds of examples of tutorials on-line for making a ToDo list.  They aren't particularly
complex, nor are they interesting.  The api portion of these examples are very simplistic.

So instead I decided to play with what an enterprise level task management system might look like.

A robust task management application will broadly have 2 systems.  The **User** system and the **Project** system.

### The User System
The user system needs an application admin component and a client componenet.
Further the client component can be broken into:
* Organizations - assuming various departments will have their own projects not 
visible to other departments.
* Organization Admins
* Oganization Super Users
* Organization Users

This will require a roll based permission system.  For example, organization a's 
projects and users shouldn't be visible to other organizations.  Projects should
only be visible to those in the organization who can create projects and those users who are
assigned to the project.  Various aspects of the users and the projects can only be edited
by specific types of users, etc.

In my opinion this is the most complex aspect of a task management system.  This 
roll based permission system is essential for protecting the api routes and verbs on those
on those routes.

### The Project System
There are 4 components to the project system.
* Projects
* Teams - _although this is starting to feel like a prehensile tail_
* Tasks
* Attachments - _documents attached to tasks and projects_

All tasks belong to a project.  All projects have teams.  All attachments belong to 
a task or a project.

The permission system described above controls who can access, create, edit and delete
the project components.
